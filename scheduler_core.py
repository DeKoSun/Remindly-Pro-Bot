# scheduler_core.py
import asyncio
import logging
import re
from datetime import datetime, timezone, time
from typing import Optional

import pytz
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.executors.asyncio import AsyncIOExecutor
from apscheduler.jobstores.memory import MemoryJobStore

from db import (
    get_due_once_and_recurring,
    delete_reminder_by_id,
    advance_recurring,
    get_tournament_subscribed_chats,
)
from texts import pick_phrase, TOURNAMENT_VARIANTS

logger = logging.getLogger("remindly")

DEFAULT_TZ = "Europe/Moscow"
TITLE_TOURNAMENT = "–ë—ã—Å—Ç—Ä—ã–π —Ç—É—Ä–Ω–∏—Ä"

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤ (MSK): 14, 16, 18, 20, 22, 00
TOURNAMENT_MINUTES = [
    (13, 55),  # 14:00
    (15, 55),  # 16:00
    (17, 55),  # 18:00
    (19, 55),  # 20:00
    (21, 55),  # 22:00
    (23, 55),  # 00:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
]

START_DISPLAY_MAP = {
    (13, 55): (14, 0),
    (15, 55): (16, 0),
    (17, 55): (18, 0),
    (19, 55): (20, 0),
    (21, 55): (22, 0),
    (23, 55): (0, 0),
}


# ---------------------- –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---------------------- #
class TournamentScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—á–µ—Ä–µ–∑ APScheduler)."""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler(
            jobstores={"default": MemoryJobStore()},
            executors={"default": AsyncIOExecutor()},
            job_defaults={"misfire_grace_time": 86400},
            timezone=pytz.timezone(DEFAULT_TZ),
        )

    def start(self) -> None:
        self.scheduler.start()
        # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç + –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
        self.scheduler.add_job(
            self._ensure_tournament_jobs,
            CronTrigger.from_crontab("*/5 * * * *", timezone=self.scheduler.timezone),
        )
        self.scheduler.add_job(
            self._ensure_tournament_jobs,
            next_run_time=datetime.now(self.scheduler.timezone),
        )
        logger.info("TournamentScheduler started")

    async def _send_tournament(self, chat_id: int, notify_time: time) -> None:
        start_str = f"{notify_time.hour:02d}:{notify_time.minute:02d}"
        text = pick_phrase(TOURNAMENT_VARIANTS, title=TITLE_TOURNAMENT, time=start_str)
        await self.bot.send_message(chat_id, text)

    def _register_daily_jobs_for_chat(self, chat_id: int, tz_name: Optional[str]) -> None:
        tz = pytz.timezone(tz_name or DEFAULT_TZ)
        for hour, minute in TOURNAMENT_MINUTES:
            job_id = f"tour_{chat_id}_{hour:02d}{minute:02d}"
            old = self.scheduler.get_job(job_id)
            if old:
                old.remove()
            self.scheduler.add_job(
                self._send_tournament,
                CronTrigger(hour=hour, minute=minute, timezone=tz),
                id=job_id,
                args=[chat_id, time(*START_DISPLAY_MAP[(hour, minute)])],
                replace_existing=True,
            )

    def _ensure_tournament_jobs(self) -> None:
        rows = get_tournament_subscribed_chats()
        for r in rows:
            chat_id = r[0]
            tz_name = r[1] if len(r) > 1 else None
            self._register_daily_jobs_for_chat(chat_id, tz_name)


# ----------------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ (once/cron) –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ----------------- #
class UniversalReminderScheduler:
    """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)."""

    def __init__(self, bot: Bot, poll_interval_sec: int = 30):
        self.bot = bot
        self.poll_interval_sec = poll_interval_sec
        self._task: Optional[asyncio.Task] = None

    def start(self):
        if not self._task or self._task.done():
            self._task = asyncio.create_task(self._loop())
            logger.info(
                "UniversalReminderScheduler started (interval=%ss)", self.poll_interval_sec
            )

    async def _loop(self):
        while True:
            try:
                await self._tick()
            except Exception as e:
                logger.exception("scheduler tick failed: %s", e)
            await asyncio.sleep(self.poll_interval_sec)

    async def _tick(self):
        # now –≤ UTC ‚Äî –≤—Å—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –≤ –ë–î —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ UTC
        now = datetime.now(timezone.utc)

        # –ë–µ—Ä—ë–º –≤—Å–µ, —á—Ç–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –∫ —Ç–µ–∫—É—â–µ–º—É –º–æ–º–µ–Ω—Ç—É (—Å –Ω–µ–±–æ–ª—å—à–∏–º –æ–∫–Ω–æ–º –≤ 60 —Å–µ–∫)
        # –û–∫–Ω–æ —Å—Ç—Ä–∞—Ö—É–µ—Ç –æ—Ç –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è/—Å–µ—Ç–µ–≤—ã—Ö –ª–∞–≥–æ–≤.
        once, cron = get_due_once_and_recurring(window_minutes=1)
        logger.info("[universal] tick %s: due_once=%s, due_cron=%s", now.isoformat(), len(once), len(cron))

        # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for r in once:
            try:
                text = r.get("text") or ""
                chat_id = r["chat_id"]
                await self.bot.send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: <b>{text}</b>")
                delete_reminder_by_id(r["id"])
                logger.info("[sent-once] id=%s chat=%s", r["id"], chat_id)
            except Exception as e:
                logger.exception("send once failed (id=%s): %s", r.get("id"), e)

        # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è (cron)
        for r in cron:
            try:
                text = r.get("text") or ""
                chat_id = r["chat_id"]
                footer = self._repeat_footer(r.get("cron_expr") or "")
                await self.bot.send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: <b>{text}</b>\n{footer}")

                # –°–¥–≤–∏–≥–∞–µ–º next_at –≤–ø–µ—Ä—ë–¥ —Å–æ–≥–ª–∞—Å–Ω–æ cron_expr (–¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ë–î)
                ce = r.get("cron_expr") or "* * * * *"
                advance_recurring(r["id"], ce)
                logger.info("[sent-cron] id=%s chat=%s next->advance", r["id"], chat_id)
            except Exception as e:
                logger.exception("send cron failed (id=%s): %s", r.get("id"), e)

    # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è
    def _repeat_footer(self, cron_expr: str) -> str:
        # */N * * * *  ‚Üí –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
        m = re.match(r"^\*/(\d+)\s+\*\s+\*\s+\*\s+\*$", cron_expr.strip())
        if m:
            n = int(m.group(1))
            return f"üîÅ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {n} –º–∏–Ω"

        # X Y * * * ‚Üí –µ–∂–µ–¥–Ω–µ–≤–Ω–æ HH:MM
        m2 = re.match(r"^(\d+)\s+(\d+)\s+\*\s+\*\s+\*$", cron_expr.strip())
        if m2:
            mm = int(m2.group(1))
            hh = int(m2.group(2))
            return f"üîÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {hh:02d}:{mm:02d}"

        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π cron
        return "üîÅ –ü–æ–≤—Ç–æ—Ä –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
