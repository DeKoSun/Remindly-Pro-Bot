# main.py  ‚Äî aiogram v2.25.2
import os
import json
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)

# ---------- ENV ----------
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://github-production-83c6.up.railway.app/")  # <-- —Ç–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π HTTPS

if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN/BOT_TOKEN is not set")

# ---------- BOT/DP ----------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ---------- Supabase (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------
supabase = None
try:
    if SUPABASE_URL and SUPABASE_KEY:
        from supabase import create_client
        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        logging.info("Supabase client initialized")
    else:
        logging.warning("SUPABASE_URL/SUPABASE_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
except Exception:
    logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase")

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å WebApp ----------
def register_kb() -> ReplyKeyboardMarkup:
    url = WEBAPP_URL.strip()
    if not url.startswith("http"):
        url = "https://" + url  # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –µ—Å–ª–∏ –∑–∞–±—É–¥–µ–º —Å—Ö–µ–º—É
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É", web_app=WebAppInfo(url=url)))
    return kb

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=register_kb()
    )

@dp.message_handler(commands=["register"])
async def cmd_register(message: types.Message):
    await message.answer(
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=register_kb()
    )

# ---------- –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp ----------
@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def handle_webapp(message: types.Message):
    try:
        raw = message.web_app_data.data or "{}"
        data = json.loads(raw)
        logging.info(f"WebApp data from {message.from_user.id}: {data}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if supabase:
            payload = {
                "telegram_id": str(message.from_user.id),
                "nickname": data.get("nickname"),
                "telegram": data.get("telegram"),
                "expectations": data.get("expectations"),
                "play_other": data.get("play_other"),
                "clan_life": data.get("clan_life"),
                # –ï—Å–ª–∏ —É —Ç–µ–±—è –∫–æ–ª–æ–Ω–∫–∞ JSON/array ‚Äî –æ—Å—Ç–∞–≤–ª—è–π –∫–∞–∫ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–π —Å—Ç—Ä–æ–∫–æ–π:
                "decks": data.get("decks"),
            }
            res = supabase.table("players").insert(payload).execute()
            logging.info(f"Supabase insert result: {res}")

        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ.")
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ WEB_APP_DATA")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

# ---------- RUN ----------
if __name__ == "__main__":
    logging.info("Bot starting‚Ä¶")
    executor.start_polling(dp, skip_updates=True)
