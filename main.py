import asyncio
import logging
import os
import random
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
    BotCommandScopeDefault,
    BotCommandScopeAllGroupChats,
)

from croniter import croniter

import db
from scheduler_core import delivery_loop
from time_parse import (
    parse_once_when,
    parse_repeat_spec,
    to_utc,
    format_local_time,
    DEFAULT_TZ,  # –æ–±—ã—á–Ω–æ Europe/Moscow (–ú–°–ö) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
)
from texts import *
from texts import TOURNEY_TEMPLATES
from utils import short_rid, is_owner

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("remindly")

BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_USER_ID = os.getenv("OWNER_USER_ID", "0")

# aiogram 3.7+: parse_mode —á–µ—Ä–µ–∑ DefaultBotProperties
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# =========================
# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
# =========================
class AddOnce(StatesGroup):
    waiting_text = State()
    waiting_when = State()


class AddCron(StatesGroup):
    waiting_text = State()
    waiting_spec = State()


# =========================
# TZ utils
# =========================
async def tz_for_user_only(user_id: int) -> ZoneInfo | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç TZ, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ª–∏–±–æ None."""
    tz_name = await db.get_user_timezone(user_id)
    if not tz_name:
        return None
    try:
        return ZoneInfo(tz_name)
    except Exception:
        return None


async def effective_tz(user_id: int, chat_id: int) -> ZoneInfo | None:
    """
    –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è TZ:
      1) –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è TZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (tg_users.timezone)
      2) default_timezone —á–∞—Ç–∞ (chats.default_timezone)
    –ï—Å–ª–∏ –æ–±–µ –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî None (–ø–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞ —É–∫–∞–∑–∞—Ç—å).
    """
    utz = await tz_for_user_only(user_id)
    if utz:
        return utz
    ctz_name = await db.get_chat_timezone(chat_id)
    if ctz_name:
        try:
            return ZoneInfo(ctz_name)
        except Exception:
            return None
    return None


def tz_key(tz: ZoneInfo) -> str:
    """–í–µ—Ä–Ω—É—Ç—å –∫–ª—é—á TZ, –Ω–∞–ø—Ä–∏–º–µ—Ä 'America/New_York'."""
    return getattr(tz, "key", str(tz))


def _owner_guard(m: Message) -> bool:
    if m.chat.type in {ChatType.GROUP, ChatType.SUPERGROUP}:
        return is_owner(m.from_user.id, OWNER_USER_ID)
    return True


# =========================
# –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
# =========================
@dp.message(Command("start"))
async def cmd_start(m: Message):
    await db.upsert_chat(m.chat.id, m.chat.type, getattr(m.chat, "title", None))
    await m.answer(START)


@dp.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer(HELP)


@dp.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer(PING)


# =========================
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–∑–æ–Ω–∞–º–∏
# =========================
@dp.message(Command("set_timezone"))
async def cmd_set_timezone(m: Message, command: CommandObject):
    """
    /set_timezone Europe/Moscow
    /set_timezone America/New_York
    /set_timezone Asia/Yekaterinburg
    """
    arg = (command.args or "").strip()
    if not arg:
        await m.answer(
            "–£–∫–∞–∂–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>/set_timezone Europe/Moscow</code>\n"
            "<code>/set_timezone America/New_York</code>\n"
            "<code>/set_timezone Asia/Yekaterinburg</code>"
        )
        return
    try:
        _ = ZoneInfo(arg)  # –≤–∞–ª–∏–¥–∞—Ü–∏—è
    except Exception:
        await m.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ (Region/City).")
        return

    await db.set_user_timezone(m.from_user.id, arg)
    await m.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{arg}</b>")


@dp.message(Command("my_timezone"))
async def cmd_my_timezone(m: Message):
    utz = await tz_for_user_only(m.from_user.id)
    ctz = await db.get_chat_timezone(m.chat.id)
    eff = await effective_tz(m.from_user.id, m.chat.id)
    await m.answer(
        "üïí –¢–≤–æ–∏ TZ-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –õ–∏—á–Ω–∞—è: <b>{tz_key(utz) if utz else '‚Äî'}</b>\n"
        f"‚Ä¢ TZ —á–∞—Ç–∞: <b>{ctz or '‚Äî'}</b>\n"
        f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è: <b>{tz_key(eff) if eff else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}</b>"
    )


@dp.message(Command("set_chat_timezone"))
async def cmd_set_chat_timezone(m: Message, command: CommandObject):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π TZ –¥–ª—è —á–∞—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏—á–Ω–∞—è TZ –Ω–µ –∑–∞–¥–∞–Ω–∞)."""
    if not _owner_guard(m):
        await m.answer(NOT_ALLOWED)
        return

    arg = (command.args or "").strip()
    if not arg:
        await m.answer(
            "–£–∫–∞–∂–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —á–∞—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<code>/set_chat_timezone Asia/Yekaterinburg</code>\n"
            "<code>/set_chat_timezone Europe/Moscow</code>"
        )
        return

    try:
        _ = ZoneInfo(arg)
    except Exception:
        await m.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ (Region/City).")
        return

    await db.set_chat_timezone(m.chat.id, arg)
    await m.answer(f"‚úÖ –î–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{arg}</b>")


# =========================
# –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ
# =========================
@dp.message(Command("add"))
async def cmd_add(m: Message, state: FSMContext):
    await db.upsert_chat(m.chat.id, m.chat.type, getattr(m.chat, "title", None))
    await state.set_state(AddOnce.waiting_text)
    await m.answer(ASK_TEXT_ONCE)


# –ê–ª–∏–∞—Å: /add@BotName
@dp.message(F.text.regexp(r"^/add(?:@[\w_]+)?\b"))
async def _alias_add(m: Message, state: FSMContext):
    return await cmd_add(m, state)


@dp.message(AddOnce.waiting_text)
async def add_once_text(m: Message, state: FSMContext):
    await state.update_data(text=m.text.strip())
    await state.set_state(AddOnce.waiting_when)
    await m.answer(ASK_WHEN_ONCE)


@dp.message(AddOnce.waiting_when)
async def add_once_when(m: Message, state: FSMContext):
    data = await state.get_data()
    text = data["text"]

    user_tz = await effective_tz(m.from_user.id, m.chat.id)
    if not user_tz:
        await m.answer(
            "–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –£–∫–∞–∂–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:\n"
            "<code>/set_timezone America/New_York</code>\n"
            "–∏–ª–∏ –∞–¥–º–∏–Ω —á–∞—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —á–∞—Ç–∞:\n"
            "<code>/set_chat_timezone Asia/Yekaterinburg</code>"
        )
        return

    now_local = datetime.now(tz=user_tz)
    try:
        when_local, _ = parse_once_when(m.text, now_local, user_tz)
    except Exception as e:
        await m.answer(f"‚ùóÔ∏è {e}")
        return

    remind_at_utc = to_utc(when_local, user_tz)
    try:
        _ = await db.create_once(m.chat.id, m.from_user.id, text, remind_at_utc)
    except Exception as e:
        logging.exception("CREATE once failed")
        await m.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")
        return

    await state.clear()

    # –õ–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî –≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π TZ
    local_time = format_local_time(remind_at_utc, user_tz_name=tz_key(user_tz), with_tz_abbr=True)
    await m.answer(CONFIRM_ONCE_SAVED.format(when_human=f"{local_time}"))


# =========================
# –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è
# =========================
@dp.message(Command("repeat"))
async def cmd_repeat(m: Message, state: FSMContext):
    await db.upsert_chat(m.chat.id, m.chat.type, getattr(m.chat, "title", None))
    await state.set_state(AddCron.waiting_text)
    await m.answer(ASK_TEXT_CRON)


# –§–æ–ª–±—ç–∫: /repeat@BotName –≤ –≥—Ä—É–ø–ø–∞—Ö
@dp.message(F.text.regexp(r"^/repeat(?:@[\w_]+)?\b"))
async def cmd_repeat_alias(m: Message, state: FSMContext):
    return await cmd_repeat(m, state)


@dp.message(AddCron.waiting_text)
async def add_cron_text(m: Message, state: FSMContext):
    await state.update_data(text=m.text.strip())
    await state.set_state(AddCron.waiting_spec)
    await m.answer(ASK_SPEC_CRON)


@dp.message(AddCron.waiting_spec)
async def add_cron_spec(m: Message, state: FSMContext):
    data = await state.get_data()
    text = data["text"]

    user_tz = await effective_tz(m.from_user.id, m.chat.id)
    if not user_tz:
        await m.answer(
            "–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –£–∫–∞–∂–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:\n"
            "<code>/set_timezone America/New_York</code>\n"
            "–∏–ª–∏ –∞–¥–º–∏–Ω —á–∞—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —á–∞—Ç–∞:\n"
            "<code>/set_chat_timezone Asia/Yekaterinburg</code>"
        )
        return

    now_local = datetime.now(tz=user_tz)
    try:
        cron_expr, human_suffix, next_local = parse_repeat_spec(m.text, now_local)
    except Exception as e:
        await m.answer(f"‚ùóÔ∏è {e}")
        return

    next_utc = to_utc(next_local, user_tz)
    meta = {"tz": tz_key(user_tz)}  # —á—Ç–æ–±—ã scheduler —Å–¥–≤–∏–≥–∞–ª –≤ —ç—Ç–æ–π TZ
    try:
        _ = await db.create_cron(m.chat.id, m.from_user.id, text, cron_expr, next_utc, category=None, meta=meta)
    except Exception as e:
        logging.exception("CREATE cron failed")
        await m.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")
        return

    await state.clear()

    # –ü–æ–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
    local_next = format_local_time(next_utc, user_tz_name=tz_key(user_tz), with_tz_abbr=True)
    await m.answer(CONFIRM_CRON_SAVED.format(next_local=local_next))


# =========================
# /list
# =========================
def _row_to_line(row, user_tz_name: str) -> str:
    kind = row["kind"]
    text = row["text"]
    paused = row["paused"]

    if kind == "once":
        when_utc = row["remind_at"]
        when_str = format_local_time(when_utc, user_tz_name=user_tz_name, with_tz_abbr=False)
        return f"‚Ä¢ ‚è± {when_str} ‚Äî ‚Äú{text}‚Äù {'(‚è∏)' if paused else ''}"
    else:
        nxt_utc = row["next_at"]
        expr = row["cron_expr"]
        nxt_str = format_local_time(nxt_utc, user_tz_name=user_tz_name, with_tz_abbr=False)
        return f"‚Ä¢ üîÅ {expr} ‚Üí {nxt_str} ‚Äî ‚Äú{text}‚Äù {'(‚è∏)' if paused else ''}"


def _row_buttons(row):
    rid = row["id"]
    paused = row["paused"]
    btns = []
    if paused:
        btns.append(InlineKeyboardButton(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f"resume:{rid}"))
    else:
        btns.append(InlineKeyboardButton(text="‚è∏ –ü–∞—É–∑–∞", callback_data=f"pause:{rid}"))
    btns.append(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{rid}"))
    return InlineKeyboardMarkup(inline_keyboard=[btns])


@dp.message(Command("list"))
async def cmd_list(m: Message):
    rows = await db.list_by_chat(m.chat.id)
    if not rows:
        await m.answer(LIST_EMPTY)
        return

    eff = await effective_tz(m.from_user.id, m.chat.id)
    user_tz_name = tz_key(eff) if eff else tz_key(DEFAULT_TZ)

    await m.answer(LIST_HEADER)
    for r in rows:
        await m.answer(_row_to_line(r, user_tz_name), reply_markup=_row_buttons(r))


@dp.callback_query(F.data.startswith(("pause:", "resume:", "del:")))
async def cb_list_actions(c: CallbackQuery):
    action, rid = c.data.split(":", 1)
    if action == "pause":
        await db.set_paused(rid, True)
        await c.answer(PAUSED, show_alert=False)
    elif action == "resume":
        await db.set_paused(rid, False)
        await c.answer(RESUMED, show_alert=False)
    elif action == "del":
        await db.delete_reminder(rid)
        await c.answer(DELETED, show_alert=False)
    try:
        await c.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass


# =========================
# –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ú–°–ö)
# =========================
def _tournament_crons_local():
    """
    –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞ ¬´–ë—ã—Å—Ç—Ä–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞¬ª –ø–æ –ú–°–ö.
    –°—Ç–∞—Ä—Ç—ã: 14:00,16:00,18:00,20:00,22:00,00:00
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ 13:55,15:55,17:55,19:55,21:55,23:55 (–ú–°–ö).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º cron –≤ –ú–ï–°–¢–ù–û–ú (DEFAULT_TZ=MSK) –≤—Ä–µ–º–µ–Ω–∏.
    """
    times = [(13, 55), (15, 55), (17, 55), (19, 55), (21, 55), (23, 55)]
    return [f"{mm} {hh} * * *" for hh, mm in times]


async def _install_tournament_crons_for_chat(chat_id: int, user_id: int):
    # –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ
    if hasattr(db, "delete_tournament_crons"):
        await db.delete_tournament_crons(chat_id)

    now_local = datetime.now(tz=DEFAULT_TZ)  # –ú–°–ö
    for expr in _tournament_crons_local():
        next_local = croniter(expr, now_local).get_next(datetime)  # –≤ –ú–°–ö
        next_utc = to_utc(next_local, DEFAULT_TZ)                  # —Ö—Ä–∞–Ω–∏–º –≤ UTC
        text = random.choice(TOURNEY_TEMPLATES)
        meta = {"tz": "Europe/Moscow"}
        await db.create_cron(chat_id, user_id, text, expr, next_utc, category="tournament", meta=meta)


@dp.message(Command("subscribe_tournaments"))
async def cmd_sub(m: Message):
    if not _owner_guard(m):
        await m.answer(NOT_ALLOWED)
        return
    await db.upsert_chat(m.chat.id, m.chat.type, getattr(m.chat, "title", None))
    await db.set_tournament(m.chat.id, True)
    await _install_tournament_crons_for_chat(m.chat.id, m.from_user.id)
    await m.answer(SUB_ON)


@dp.message(Command("unsubscribe_tournaments"))
async def cmd_unsub(m: Message):
    if not _owner_guard(m):
        await m.answer(NOT_ALLOWED)
        return
    await db.set_tournament(m.chat.id, False)
    if hasattr(db, "delete_tournament_crons"):
        await db.delete_tournament_crons(m.chat.id)
    await m.answer(SUB_OFF)


# ======= NEW: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –ø–∏–Ω–≥ =======
@dp.message(Command("tourney_now"))
async def cmd_tourney_now(m: Message):
    """
    –†—É—á–Ω–æ–π –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–∏–Ω–≥ ¬´–ë—ã—Å—Ç—Ä–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞¬ª.
    –ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏/–∫—Ä–æ–Ω–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—É–±–ª–∏–∫—É–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É.
    """
    text = random.choice(TOURNEY_TEMPLATES)
    await m.answer(f"<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n{text}")


# =========================
# –ó–∞–ø—É—Å–∫
# =========================
async def on_startup():
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling (—Å–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫)
    await bot.delete_webhook(drop_pending_updates=False)

    # –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ (–∏ –≤ –õ–°, –∏ –≤ –≥—Ä—É–ø–ø–∞—Ö)
    cmds = [
        BotCommand(command="help", description="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
        BotCommand(command="add", description="–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand(command="repeat", description="–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
        BotCommand(command="set_timezone", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"),
        BotCommand(command="my_timezone", description="–ü–æ–∫–∞–∑–∞—Ç—å –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"),
        BotCommand(command="set_chat_timezone", description="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞"),
        BotCommand(command="subscribe_tournaments", description="–í–∫–ª—é—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand(command="unsubscribe_tournaments", description="–í—ã–∫–ª—é—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand(command="tourney_now", description="–°—Ä–∞–∑—É —Ç—É—Ä–Ω–∏—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand(command="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"),
    ]
    await bot.set_my_commands(cmds, scope=BotCommandScopeDefault())
    await bot.set_my_commands(cmds, scope=BotCommandScopeAllGroupChats())

    me = await bot.get_me()
    logging.info("Bot is up: @%s (id=%s) DEFAULT_TZ=%s", me.username, me.id, DEFAULT_TZ.key)

    # –§–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    asyncio.create_task(delivery_loop(bot))


def main():
    if not os.getenv("BOT_TOKEN") or not os.getenv("DATABASE_URL"):
        raise RuntimeError("BOT_TOKEN / DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω—ã")
    dp.startup.register(on_startup)
    dp.run_polling(bot)


if __name__ == "__main__":
    main()
