# main.py
import os
import logging
from datetime import datetime, timedelta, timezone

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command
from aiogram.types import (
    Update,
    BotCommand,
    ChatMemberUpdated,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllGroupChats,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from croniter import croniter

# ==== –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ ====
from scheduler_core import TournamentScheduler, UniversalReminderScheduler
from texts import HELP_TEXT
from db import (
    upsert_chat,
    upsert_telegram_user,
    get_active_reminders,
    add_reminder,              # once
    add_recurring_reminder,    # cron
    delete_reminder_by_id,
    set_paused,
)

# ================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==================
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "webhook")
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL")

if not BOT_TOKEN or not PUBLIC_BASE_URL:
    raise RuntimeError("TELEGRAM_BOT_TOKEN and PUBLIC_BASE_URL must be set")

app = FastAPI()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("remindly")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
_tourney: TournamentScheduler | None = TournamentScheduler(bot)
_universal: UniversalReminderScheduler | None = UniversalReminderScheduler(bot)

# ================== FSM: –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ==================
class AddOnceSG(StatesGroup):
    text = State()
    when = State()

class AddRepeatSG(StatesGroup):
    text = State()
    sched = State()

# =============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï =================
async def _ensure_user_chat(m: types.Message) -> None:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ –ë–î –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—Å—Ç—Ä–∞–Ω—è–µ—Ç ¬´–ø–µ—Ä–≤–æ–µ –º–æ–ª—á–∞–Ω–∏–µ¬ª)."""
    try:
        if m.from_user:
            upsert_telegram_user(m.from_user.id)
        upsert_chat(chat_id=m.chat.id, type_=m.chat.type, title=getattr(m.chat, "title", None))
    except Exception as e:
        logger.exception("ensure_user_chat failed: %s", e)

def _parse_when_once(raw: str) -> datetime:
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö:
    - '—á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç' / '+N' / '+N –º–∏–Ω'
    - '–∑–∞–≤—Ç—Ä–∞ HH:MM'
    - 'HH:MM' ‚Äî —Å–µ–≥–æ–¥–Ω—è (–µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äî –∑–∞–≤—Ç—Ä–∞)
    """
    s = (raw or "").strip().lower()
    s = (
        s.replace("–º–∏–Ω—É—Ç—É", "1 –º–∏–Ω—É—Ç—É")
         .replace("–º–∏–Ω.", "–º–∏–Ω")
         .replace("–º–∏–Ω—É—Ç–∞", "1 –º–∏–Ω—É—Ç–∞")
         .replace(" –º–∏–Ω—É—Ç", " –º–∏–Ω")
    )
    now = datetime.now(timezone.utc)

    # —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç
    if s.startswith("—á–µ—Ä–µ–∑ "):
        parts = s.split()
        if len(parts) >= 2 and parts[1].isdigit():
            return now + timedelta(minutes=int(parts[1]))

    # +N / +N –º–∏–Ω
    if s.startswith("+"):
        t = s[1:].strip().replace(" –º–∏–Ω", "").strip()
        if t.isdigit():
            return now + timedelta(minutes=int(t))

    # –∑–∞–≤—Ç—Ä–∞ HH:MM
    if s.startswith("–∑–∞–≤—Ç—Ä–∞"):
        rest = s.replace("–∑–∞–≤—Ç—Ä–∞", "").strip()
        if ":" in rest:
            hh, mm = rest.split(":")[:2]
            return (now + timedelta(days=1)).replace(hour=int(hh), minute=int(mm), second=0, microsecond=0)

    # HH:MM (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞)
    if ":" in s:
        hh, mm = s.split(":")[:2]
        if hh.isdigit() and mm.isdigit():
            target = now.replace(hour=int(hh), minute=int(mm), second=0, microsecond=0)
            if target <= now:
                target += timedelta(days=1)
            return target

    # fail-safe
    return now + timedelta(minutes=2)

def _parse_repeat_to_cron(raw: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚Üí CRON:
    - '–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É' ‚Üí '* * * * *'
    - '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ HH:MM' ‚Üí 'MM HH * * *'
    - 'cron: <EXPR>' ‚Üí <EXPR> –∫–∞–∫ –µ—Å—Ç—å
    - 'HH:MM' ‚Üí –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è
    """
    s = (raw or "").strip().lower()
    if s.startswith("cron:"):
        expr = s.split("cron:", 1)[1].strip()
        return expr

    if s == "–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É":
        return "* * * * *"

    if s.startswith("–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"):
        rest = s.replace("–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "").strip()
        if ":" in rest:
            hh, mm = rest.split(":")[:2]
            if hh.isdigit() and mm.isdigit():
                return f"{int(mm)} {int(hh)} * * *"

    # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –ø—Ä–æ—Å—Ç–æ ¬´HH:MM¬ª ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è
    if ":" in s:
        hh, mm = s.split(":")[:2]
        if hh.isdigit() and mm.isdigit():
            return f"{int(mm)} {int(hh)} * * *"

    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –º–æ–ª—á–∞—Ç—å
    return "* * * * *"

def _cron_next_utc(expr: str) -> datetime:
    now = datetime.now(timezone.utc)
    return croniter(expr, now).get_next(datetime)

def _fmt_utc(dt: datetime) -> str:
    if not isinstance(dt, datetime):
        try:
            dt = datetime.fromisoformat(str(dt))
        except Exception:
            return str(dt)
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M (UTC)")

# ================== –•–ï–ù–î–õ–ï–†–´ ==================
@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    await _ensure_user_chat(m)
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command("help"))
async def cmd_help(m: types.Message):
    await _ensure_user_chat(m)
    await m.answer(HELP_TEXT, disable_web_page_preview=True)

@dp.message(Command("ping")))
async def cmd_ping(m: types.Message):
    """–ë—ã—Å—Ç—Ä—ã–π health-check: –ë–î –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏."""
    await _ensure_user_chat(m)
    try:
        _ = get_active_reminders(m.from_user.id)
        sched = "ok" if (_tourney is not None and _universal is not None) else "no"
        await m.answer(f"pong ‚úÖ  | db=ok | sched={sched}")
    except Exception as e:
        await m.answer(f"pong ‚ùå  | db error: <code>{e}</code>")

# ----- –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ (—Ä–∞—Å—Å—ã–ª–∫–∏ –¥–µ–ª–∞–µ—Ç scheduler_core) -----
@dp.message(Command("subscribe_tournaments"))
async def cmd_subscribe_tournaments(m: types.Message):
    await _ensure_user_chat(m)
    if m.chat.type not in {ChatType.GROUP, ChatType.SUPERGROUP}:
        return await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
    await m.answer("‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

@dp.message(Command("unsubscribe_tournaments"))
async def cmd_unsubscribe_tournaments(m: types.Message):
    await _ensure_user_chat(m)
    if m.chat.type not in {ChatType.GROUP, ChatType.SUPERGROUP}:
        return await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
    await m.answer("‚è∏Ô∏è –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

@dp.message(Command("tourney_now"))
async def cmd_tourney_now(m: types.Message):
    await _ensure_user_chat(m)
    await m.answer("üì£ (debug) –ü—Ä–æ–±–Ω–æ–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

# ---------- –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ ----------
@dp.message(Command("add"))
async def add_once_start(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    await state.set_state(AddOnceSG.text)
    await m.answer("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

@dp.message(AddOnceSG.text)
async def add_once_wait_when(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    await state.update_data(text=m.text.strip())
    await state.set_state(AddOnceSG.when)
    await m.answer("‚è∞ –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?\n–ü—Ä–∏–º–µ—Ä—ã: 14:30 ¬∑ –∑–∞–≤—Ç—Ä–∞ 10:00 ¬∑ —á–µ—Ä–µ–∑ 25 –º–∏–Ω—É—Ç ¬∑ +15")

@dp.message(AddOnceSG.when)
async def add_once_finish(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    data = await state.get_data()
    text = data.get("text", "").strip()
    when_raw = (m.text or "").strip()

    if not text:
        await state.clear()
        return await m.answer("‚ùå –¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /add")

    try:
        remind_at_utc = _parse_when_once(when_raw)
        _ = add_reminder(
            user_id=m.from_user.id,
            chat_id=m.chat.id,
            text=text,
            remind_at=remind_at_utc,
        )
        await state.clear()
        await m.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n<b>{text}</b>\nüïí {_fmt_utc(remind_at_utc)}")
    except Exception as e:
        logger.exception("add_once_finish error: %s", e)
        await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏–∑–º–µ–Ω–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")

# ---------- –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è ----------
@dp.message(Command("add_repeat"))
async def add_repeat_start(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    await state.set_state(AddRepeatSG.text)
    await m.answer("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

@dp.message(AddRepeatSG.text)
async def add_repeat_wait_sched(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    await state.update_data(text=m.text.strip())
    await state.set_state(AddRepeatSG.sched)
    await m.answer(
        "‚è∞ –ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?\n"
        "‚Ä¢ <i>–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É</i>\n"
        "‚Ä¢ <i>–µ–∂–µ–¥–Ω–µ–≤–Ω–æ HH:MM</i>\n"
        "‚Ä¢ <i>HH:MM</i> (—Ç–æ–∂–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ)\n"
        "‚Ä¢ <i>cron: */5 * * * *</i> (–ª—é–±–æ–π CRON)"
    )

@dp.message(AddRepeatSG.sched)
async def add_repeat_finish(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    data = await state.get_data()
    text = (data.get("text") or "").strip()
    sched_raw = (m.text or "").strip()

    if not text:
        await state.clear()
        return await m.answer("‚ùå –¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /add_repeat")

    # 1) –ü–∞—Ä—Å–∏–º –≤ CRON –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    cron_expr = _parse_repeat_to_cron(sched_raw)
    is_valid = False
    try:
        is_valid = croniter.is_valid(cron_expr)
    except Exception as e:
        # —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ä–µ–¥–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ croniter
        return await m.answer(f"‚ùå croniter error: <code>{e}</code>\nexpr: <code>{cron_expr}</code>")

    if not is_valid:
        return await m.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
            f"expr: <code>{cron_expr}</code>\n"
            "–ü–æ–ø—Ä–æ–±—É–π: ¬´–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É¬ª, ¬´–µ–∂–µ–¥–Ω–µ–≤–Ω–æ HH:MM¬ª, ¬´HH:MM¬ª –∏–ª–∏ ¬´cron: */5 * * * *¬ª."
        )

    # 2) –°—á–∏—Ç–∞–µ–º next_at –∏ –ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ë–î. –í –æ—Ç–≤–µ—Ç –æ—Ç–¥–∞–¥–∏–º –ü–û–õ–ù–£–Æ –ø—Ä–∏—á–∏–Ω—É —Å–±–æ—è
    try:
        next_at = _cron_next_utc(cron_expr)
    except Exception as e:
        return await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è: <code>{e}</code>\nexpr: <code>{cron_expr}</code>")

    try:
        _ = add_recurring_reminder(
            user_id=m.from_user.id,
            chat_id=m.chat.id,
            text=text,
            cron_expr=cron_expr,
            next_at=next_at,
        )
        await state.clear()
        return await m.answer(
            "‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n"
            f"<b>{text}</b>\n"
            f"üîÅ CRON: <code>{cron_expr}</code>\n"
            f"üïí –ë–ª–∏–∂–∞–π—à–µ–µ: {_fmt_utc(next_at)}"
        )
    except Exception as e:
        # –∑–¥–µ—Å—å —Ö–æ—Ç–∏–º –≤–∏–¥–µ—Ç—å —Ä–µ–∞–ª—å–Ω—É—é SQL-–æ—à–∏–±–∫—É/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ/NULL-–ø–æ–ª–µ
        return await m.answer(
            "‚ùå DB insert failed.\n"
            f"reason: <code>{e}</code>\n"
            f"expr: <code>{cron_expr}</code>\nnext_at: <code>{_fmt_utc(next_at)}</code>"
        )

# ---------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ----------
@dp.message(Command("list"))
async def cmd_list(m: types.Message):
    await _ensure_user_chat(m)
    items = get_active_reminders(m.from_user.id)
    if not items:
        return await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    lines = []
    for r in items:
        rid = r["id"] if isinstance(r, dict) else r[0]
        text = r["text"] if isinstance(r, dict) else r[1]
        kind = (r.get("kind") if isinstance(r, dict) else None) or "once"
        remind_at = r.get("remind_at") if isinstance(r, dict) else None
        next_at = r.get("next_at") if isinstance(r, dict) else None

        when_dt = remind_at if kind == "once" else next_at
        when_str = _fmt_utc(when_dt)

        # ID –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å ‚Äî —á—Ç–æ–±—ã –±—ã–ª–æ —á–µ–º —É–ø—Ä–∞–≤–ª—è—Ç—å:
        lines.append(f"‚Ä¢ <code>{rid}</code> ‚Äî {text} ‚Äî {when_str} ‚Äî {('üîÅ' if kind!='once' else '‚Ä¢')}")
    await m.answer("üîî –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(lines))

@dp.message(Command("delete"))
async def cmd_delete(m: types.Message):
    await _ensure_user_chat(m)
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return await m.answer("–£–∫–∞–∂–∏ ID: /delete <id>")
    rid = parts[1].strip()
    try:
        delete_reminder_by_id(rid, m.chat.id)
        await m.answer("üóëÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.exception("delete error: %s", e)
        await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

@dp.message(Command("pause"))
async def cmd_pause(m: types.Message):
    await _ensure_user_chat(m)
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return await m.answer("–£–∫–∞–∂–∏ ID: /pause <id>")
    rid = parts[1].strip()
    try:
        set_paused(reminder_id=rid, chat_id=m.chat.id, paused=True)
        await m.answer("‚è∏Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–∞—É–∑—É.")
    except Exception as e:
        logger.exception("pause error: %s", e)
        await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É.")

@dp.message(Command("resume"))
async def cmd_resume(m: types.Message):
    await _ensure_user_chat(m)
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return await m.answer("–£–∫–∞–∂–∏ ID: /resume <id>")
    rid = parts[1].strip()
    try:
        set_paused(reminder_id=rid, chat_id=m.chat.id, paused=False)
        await m.answer("‚ñ∂Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.exception("resume error: %s", e)
        await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

# ====== –ê–≤—Ç–æ-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç ======
@dp.my_chat_member()
async def on_my_chat_member(update: ChatMemberUpdated):
    chat = update.chat
    try:
        upsert_chat(chat_id=chat.id, type_=chat.type, title=getattr(chat, "title", None))
        if update.from_user:
            upsert_telegram_user(update.from_user.id)
        logger.info("my_chat_member upsert: chat=%s user=%s", chat.id, getattr(update.from_user, "id", None))
    except Exception as e:
        logger.exception("my_chat_member upsert failed: %s", e)

# ================== –í–µ–±—Ö—É–∫ ==================
@app.post(f"/{WEBHOOK_SECRET}")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception:
        logger.exception("Webhook handler failed")
        return {"ok": True}

@app.get("/")
async def root():
    return {"status": "up"}

@app.get("/health")
async def health():
    return {"ok": True}

# ================== –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ==================
@app.on_event("startup")
async def on_startup():
    if _tourney:
        _tourney.start()
    if _universal:
        _universal.start()

    await bot.set_webhook(
        url=f"{PUBLIC_BASE_URL}/{WEBHOOK_SECRET}",
        drop_pending_updates=True,
    )

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
    await bot.set_my_commands(
        [
            BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"),
            BotCommand(command="add", description="–°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="add_repeat", description="–°–æ–∑–¥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è"),
            BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
            BotCommand(command="delete", description="–£–¥–∞–ª–∏—Ç—å –ø–æ ID"),
            BotCommand(command="pause", description="–ü–∞—É–∑–∞ –ø–æ ID"),
            BotCommand(command="resume", description="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ ID"),
            BotCommand(command="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"),
        ],
        scope=BotCommandScopeAllPrivateChats(),
    )

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥—Ä—É–ø–ø
    await bot.set_my_commands(
        [
            BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"),
            BotCommand(command="add", description="–°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="add_repeat", description="–°–æ–∑–¥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è"),
            BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
            BotCommand(command="delete", description="–£–¥–∞–ª–∏—Ç—å –ø–æ ID"),
            BotCommand(command="pause", description="–ü–∞—É–∑–∞ –ø–æ ID"),
            BotCommand(command="resume", description="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ ID"),
            BotCommand(command="subscribe_tournaments", description="–í–∫–ª—é—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand(command="unsubscribe_tournaments", description="–í—ã–∫–ª—é—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand(command="tourney_now", description="–ü—Ä–æ–±–Ω–æ–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
            BotCommand(command="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"),
        ],
        scope=BotCommandScopeAllGroupChats(),
    )

    logger.info("Webhook & commands registered. Public URL: %s", PUBLIC_BASE_URL)
