# FILE: main.py
import logging
import os
from datetime import datetime, time, timedelta, timezone

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command
from aiogram.types import (
    Update,
    BotCommand,
    CallbackQuery,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllGroupChats,
)
from aiogram.utils.chat_action import ChatActionSender
from aiogram.utils.keyboard import InlineKeyboardBuilder

# FSM
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from db import (
    # –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    upsert_chat,
    upsert_telegram_user,           # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_tournament_subscription,
    add_reminder,
    get_active_reminders,
    delete_reminder_by_id,
    set_paused,
    # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ
    add_recurring_reminder,
    set_user_tz,
    set_quiet_hours,
    has_editor_role,
    grant_role,
    revoke_role,
    list_roles,
    # –¥–ª—è inline-–¥–µ–π—Å—Ç–≤–∏–π
    get_reminder_by_id,
    update_reminder_text,
    set_paused_by_id,
    update_remind_at,               # –¥–ª—è ¬´+15 –º–∏–Ω—É—Ç¬ª –∏ ¬´–∑–∞–≤—Ç—Ä–∞¬ª
)

from scheduler_core import TournamentScheduler, UniversalReminderScheduler
from texts import HELP_TEXT

# ======================= –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =======================
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "webhook")
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL")

if not BOT_TOKEN or not PUBLIC_BASE_URL:
    raise RuntimeError("TELEGRAM_BOT_TOKEN and PUBLIC_BASE_URL must be set")

app = FastAPI()
logger = logging.getLogger("remindly")
logger.setLevel(logging.INFO)
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ======================= –•–µ–ª–ø–µ—Ä—ã ============================
MSK_TZ = "Europe/Moscow"
TOURNEY_SLOTS = [time(14, 0), time(16, 0), time(18, 0), time(20, 0), time(22, 0), time(0, 0)]

def _msk_now():
    import pytz
    return datetime.now(pytz.timezone(MSK_TZ))

async def _ensure_user_chat(m: types.Message | types.CallbackQuery):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ telegram_users –∏ telegram_chats,
    —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å FK-–æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ reminders.
    """
    if isinstance(m, types.CallbackQuery):
        user = m.from_user
        chat = m.message.chat
    else:
        user = m.from_user
        chat = m.chat

    try:
        upsert_telegram_user(user.id)
    except Exception as e:
        logger.exception("upsert_telegram_user failed: %s", e)

    try:
        # –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ ‚Äî FK —É –Ω–∞—Å –Ω–∞ chat_id –µ—Å—Ç—å
        upsert_chat(chat_id=chat.id, type_=chat.type, title=getattr(chat, "title", None))
    except Exception as e:
        logger.exception("upsert_chat failed: %s", e)

def _parse_when(text: str) -> datetime | None:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º:
      - HH:MM (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞)
      - –∑–∞–≤—Ç—Ä–∞ HH:MM
      - —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç / —á–µ—Ä–µ–∑ N —á–∞—Å–æ–≤
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º UTC datetime.
    """
    q = text.strip().lower()
    now = datetime.now(timezone.utc)

    # —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤
    if q.startswith("—á–µ—Ä–µ–∑"):
        parts = q.replace("—á–µ—Ä–µ–∑", "").strip().split()
        if not parts:
            return None
        try:
            n = int(parts[0])
        except ValueError:
            return None
        unit = parts[1] if len(parts) > 1 else "–º–∏–Ω"
        if unit.startswith("—á–∞—Å"):
            return now + timedelta(hours=n)
        return now + timedelta(minutes=n)

    # –∑–∞–≤—Ç—Ä–∞ HH:MM
    if q.startswith("–∑–∞–≤—Ç—Ä–∞"):
        hhmm = q.replace("–∑–∞–≤—Ç—Ä–∞", "").strip()
        try:
            hh, mm = map(int, hhmm.split(":"))
        except Exception:
            return None
        dt = datetime.now(timezone.utc).replace(hour=hh, minute=mm, second=0, microsecond=0) + timedelta(days=1)
        return dt

    # HH:MM
    if ":" in q:
        try:
            hh, mm = map(int, q.split(":"))
        except Exception:
            return None
        dt = datetime.now(timezone.utc).replace(hour=hh, minute=mm, second=0, microsecond=0)
        if dt <= now:
            dt = dt + timedelta(days=1)
        return dt

    return None

# ======= –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è + inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ =======
def _reminder_card_text(r: dict) -> str:
    rid = str(r["id"])[:8]
    when = r.get("remind_at") or r.get("next_at") or "‚Äî"
    kind = r.get("kind", "once")
    paused = "‚è∏Ô∏è" if r.get("paused") else "‚ñ∂Ô∏è"
    return (
        f"<b>{r['text']}</b>\n"
        f"ID: <code>{rid}</code>  |  {paused}  |  –≤–∏–¥: {kind}\n"
        f"–ö–æ–≥–¥–∞: <code>{when}</code>"
    )

def _reminder_kbd(rid: str, paused: bool) -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    if paused:
        kb.button(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f"r:resume:{rid}")
    else:
        kb.button(text="‚è∏ –ü–∞—É–∑–∞", callback_data=f"r:pause:{rid}")
    kb.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"r:edit:{rid}")
    kb.adjust(2)
    kb.button(text="üîÑ +15 –º–∏–Ω", callback_data=f"r:shift15:{rid}")
    kb.button(text="üìÖ –ó–∞–≤—Ç—Ä–∞ (–≤ —ç—Ç–æ –≤—Ä–µ–º—è)", callback_data=f"r:tomorrow:{rid}")
    kb.adjust(2)
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"r:del:{rid}")
    kb.adjust(2, 1)
    return kb

# ======================= /start /help =======================
@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    await _ensure_user_chat(m)
    await m.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command("help"))
async def cmd_help(m: types.Message):
    await _ensure_user_chat(m)
    await m.answer(HELP_TEXT, parse_mode=None, disable_web_page_preview=True)

# ======================= –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ =======================
_tourney = TournamentScheduler(bot)
_universal = UniversalReminderScheduler(bot)

# ======================= Webhook ===========================
@app.post(f"/{WEBHOOK_SECRET}")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception:
        logger.exception("Webhook handler failed")
        return {"ok": True}

@app.get("/")
async def root():
    return {"status": "up"}

@app.get("/health")
async def health():
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    _tourney.start()
    _universal.start()

    await bot.set_webhook(
        url=f"{PUBLIC_BASE_URL}/{WEBHOOK_SECRET}",
        drop_pending_updates=True,
    )

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –õ–ò–ß–ù–´–• —á–∞—Ç–æ–≤
    await bot.set_my_commands(
        commands=[
            BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"),
            BotCommand(command="add", description="–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Å –∫–Ω–æ–ø–∫–∞–º–∏)"),
            BotCommand(command="delete", description="–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="pause", description="–ü–∞—É–∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand(command="resume", description="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="add_repeat", description="–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="set_tz", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É"),
            BotCommand(command="quiet", description="–¢–∏—Ö–∏–µ —á–∞—Å—ã"),
            BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥"),
        ],
        scope=BotCommandScopeAllPrivateChats(),
    )

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ì–†–£–ü–ü
    await bot.set_my_commands(
        commands=[
            BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"),
            BotCommand(command="subscribe_tournaments", description="–í–∫–ª—é—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand(command="unsubscribe_tournaments", description="–í—ã–∫–ª—é—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand(command="tourney_now", description="–ü—Ä–æ–±–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"),
            BotCommand(command="schedule", description="–ë–ª–∏–∂–∞–π—à–∏–µ —Å—Ç–∞—Ä—Ç—ã/–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
            BotCommand(command="add", description="–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
            BotCommand(command="delete", description="–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="pause", description="–ü–∞—É–∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand(command="resume", description="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="add_repeat", description="–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="set_tz", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É"),
            BotCommand(command="quiet", description="–¢–∏—Ö–∏–µ —á–∞—Å—ã"),
            BotCommand(command="role", description="–†–æ–ª–∏ —á–∞—Ç–∞"),
            BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥"),
        ],
        scope=BotCommandScopeAllGroupChats(),
    )

# ======================= –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ======================
async def _is_admin(message: types.Message) -> bool:
    await _ensure_user_chat(message)
    if message.chat.type not in {ChatType.GROUP, ChatType.SUPERGROUP}:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return False
    member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
    if not (member.is_chat_admin() or member.is_chat_creator()):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
        return False
    return True

async def _is_editor_or_admin(message: types.Message) -> bool:
    await _ensure_user_chat(message)
    if message.chat.type == ChatType.PRIVATE:
        return True
    member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.is_chat_admin() or member.is_chat_creator():
        return True
    return has_editor_role(message.chat.id, message.from_user.id)

# ======================= –¢—É—Ä–Ω–∏—Ä—ã ===========================
@dp.message(Command("subscribe_tournaments"))
async def cmd_subscribe_tournaments(m: types.Message):
    if not await _is_admin(m):
        return
    await m.chat.do(ChatActionSender.typing())
    upsert_chat(chat_id=m.chat.id, type_=m.chat.type, title=m.chat.title)
    set_tournament_subscription(chat_id=m.chat.id, value=True)
    await m.answer(
        "‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤: 14:00, 16:00, 18:00, 20:00, 22:00, 00:00 (–ú–°–ö)."
    )

@dp.message(Command("unsubscribe_tournaments"))
async def cmd_unsubscribe_tournaments(m: types.Message):
    if not await _is_admin(m):
        return
    set_tournament_subscription(chat_id=m.chat.id, value=False)
    await m.answer("‚è∏Ô∏è –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

@dp.message(Command("tourney_now"))
async def cmd_tourney_now(m: types.Message):
    if not await _is_admin(m):
        return
    now = datetime.now()
    display = time(now.hour, (now.minute // 5) * 5)
    await m.answer("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–±–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å‚Ä¶")
    await _tourney._send_tournament(m.chat.id, display)

@dp.message(Command("schedule"))
async def cmd_schedule(m: types.Message):
    await _ensure_user_chat(m)
    now = _msk_now()
    today = now.date()
    slots: list[tuple[datetime, datetime]] = []
    for t in TOURNEY_SLOTS:
        dt = now.tzinfo.localize(datetime.combine(today, t))
        if t == time(0, 0):
            dt = dt + timedelta(days=1)
        reminder = dt - timedelta(minutes=5)
        if reminder >= now:
            slots.append((dt, reminder))
    if not slots:
        next_day = today + timedelta(days=1)
        for t in TOURNEY_SLOTS:
            dt = now.tzinfo.localize(datetime.combine(next_day, t))
            reminder = dt - timedelta(minutes=5)
            slots.append((dt, reminder))

    lines = ["üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å—Ç–∞—Ä—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–ú–°–ö):"]
    for dt, rem in slots[:6]:
        lines.append(f"‚Ä¢ —Å—Ç–∞—Ä—Ç {dt.strftime('%d.%m %H:%M')} ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ {rem.strftime('%H:%M')}")
    await m.answer("\n".join(lines))

# ============ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ (—Ä–∞–∑–æ–≤—ã–µ) –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ==========
class AddReminder(StatesGroup):
    waiting_for_text = State()
    waiting_for_time = State()

class EditReminder(StatesGroup):
    waiting_for_new_text = State()

@dp.message(Command("cancel"))
async def cmd_cancel(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.message(Command("add"))
async def add_start(message: types.Message, state: FSMContext):
    await _ensure_user_chat(message)
    await state.set_state(AddReminder.waiting_for_text)
    await message.answer("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

@dp.message(AddReminder.waiting_for_text)
async def add_got_text(message: types.Message, state: FSMContext):
    await _ensure_user_chat(message)
    await state.update_data(text=message.text.strip())
    await state.set_state(AddReminder.waiting_for_time)
    await message.answer(
        "‚è∞ –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <code>14:30</code> ‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞ 10:00</code> ‚Ä¢ <code>—á–µ—Ä–µ–∑ 25 –º–∏–Ω—É—Ç</code> ‚Ä¢ <code>—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞</code>"
    )

@dp.message(AddReminder.waiting_for_time)
async def add_got_time(message: types.Message, state: FSMContext):
    await _ensure_user_chat(message)
    when = _parse_when(message.text)
    if not when:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: 14:30 ‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 10:00 ‚Ä¢ —á–µ—Ä–µ–∑ 25 –º–∏–Ω—É—Ç ‚Ä¢ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞")
        return
    data = await state.get_data()
    text = data["text"]
    add_reminder(message.from_user.id, message.chat.id, text, when)
    logger.info("created reminder user=%s chat=%s when=%s text=%r",
                message.from_user.id, message.chat.id, when.isoformat(), text)
    await state.clear()
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n<b>{text}</b>\nüïí {when.strftime('%Y-%m-%d %H:%M')} (UTC)")

@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    await _ensure_user_chat(message)
    res = get_active_reminders(message.from_user.id)
    items = res.data or []
    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    for r in items:
        rid = str(r["id"])
        await message.answer(
            _reminder_card_text(r),
            reply_markup=_reminder_kbd(rid, bool(r.get("paused"))).as_markup(),
        )

@dp.message(Command("delete"))
async def cmd_delete(message: types.Message):
    await _ensure_user_chat(message)
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏ id: /delete <id>")
        return
    rid = parts[1]
    delete_reminder_by_id(rid)
    await message.answer(f"üóë –£–¥–∞–ª–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ <code>{rid}</code>")

@dp.message(Command("pause"))
async def cmd_pause(message: types.Message):
    await _ensure_user_chat(message)
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏ id: /pause <id>")
        return
    rid = parts[1]
    set_paused(rid, True)
    await message.answer(f"‚è∏Ô∏è –ü–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ –ø–∞—É–∑—É <code>{rid}</code>")

@dp.message(Command("resume"))
async def cmd_resume(message: types.Message):
    await _ensure_user_chat(message)
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏ id: /resume <id>")
        return
    rid = parts[1]
    set_paused(rid, False)
    await message.answer(f"‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ <code>{rid}</code>")

# ===== inline-–∫–æ–ª–ª–±—ç–∫–∏: –ø–∞—É–∑–∞/—Ä–µ–∑—é–º/—É–¥–∞–ª–∏—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ ===
@dp.callback_query(lambda c: c.data and c.data.startswith("r:"))
async def cb_router(c: CallbackQuery, state: FSMContext):
    await _ensure_user_chat(c)
    try:
        _, action, rid = c.data.split(":", 2)
    except Exception:
        await c.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    r = get_reminder_by_id(rid)
    if not r:
        await c.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω–æ).", show_alert=True)
        try:
            await c.message.delete()
        except Exception:
            pass
        return

    if action == "pause":
        set_paused_by_id(rid, True)
        r["paused"] = True
        await c.message.edit_text(_reminder_card_text(r), reply_markup=_reminder_kbd(rid, True).as_markup())
        await c.answer("–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–∞—É–∑—É.")
        return

    if action == "resume":
        set_paused_by_id(rid, False)
        r["paused"] = False
        await c.message.edit_text(_reminder_card_text(r), reply_markup=_reminder_kbd(rid, False).as_markup())
        await c.answer("–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        return

    if action == "del":
        delete_reminder_by_id(rid)
        await c.message.edit_text("üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        await c.answer("–£–¥–∞–ª–µ–Ω–æ.")
        return

    if action == "edit":
        await state.update_data(edit_rid=rid)
        await state.set_state(EditReminder.waiting_for_new_text)
        await c.answer()
        await c.message.reply("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏–ª–∏ /cancel):")
        return

    if action == "shift15":
        if r.get("kind") not in (None, "once"):
            await c.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", show_alert=True)
            return
        ra = r.get("remind_at")
        if not ra:
            await c.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", show_alert=True)
            return
        try:
            ra_dt = datetime.fromisoformat(ra.replace("Z", "+00:00"))
        except Exception:
            await c.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", show_alert=True)
            return
        new_dt = ra_dt + timedelta(minutes=15)
        update_remind_at(rid, new_dt.astimezone(timezone.utc))
        r["remind_at"] = new_dt.astimezone(timezone.utc).isoformat().replace("+00:00", "Z")
        r["paused"] = False
        await c.message.edit_text(_reminder_card_text(r), reply_markup=_reminder_kbd(rid, False).as_markup())
        await c.answer("–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ +15 –º–∏–Ω—É—Ç.")
        return

    if action == "tomorrow":
        if r.get("kind") not in (None, "once"):
            await c.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", show_alert=True)
            return
        ra = r.get("remind_at")
        if not ra:
            await c.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", show_alert=True)
            return
        try:
            ra_dt = datetime.fromisoformat(ra.replace("Z", "+00:00"))
        except Exception:
            await c.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", show_alert=True)
            return
        new_dt = ra_dt + timedelta(days=1)
        update_remind_at(rid, new_dt.astimezone(timezone.utc))
        r["remind_at"] = new_dt.astimezone(timezone.utc).isoformat().replace("+00:00", "Z")
        r["paused"] = False
        await c.message.edit_text(_reminder_card_text(r), reply_markup=_reminder_kbd(rid, False).as_markup())
        await c.answer("–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")
        return

    await c.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)

@dp.message(EditReminder.waiting_for_new_text)
async def edit_set_text(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    if m.text.strip().lower() == "/cancel":
        await state.clear()
        await m.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    data = await state.get_data()
    rid = data.get("edit_rid")
    if not rid:
        await state.clear()
        await m.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /list ‚Üí ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
        return
    new_text = m.text.strip()
    update_reminder_text(rid, new_text)
    await state.clear()

    r = get_reminder_by_id(rid)
    if r:
        await m.answer("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.")
        await m.answer(
            _reminder_card_text(r),
            reply_markup=_reminder_kbd(rid, bool(r.get("paused"))).as_markup(),
        )
    else:
        await m.answer("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω. (–∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")

# ========= –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (cron) =========
@dp.message(Command("add_repeat"))
async def cmd_add_repeat(m: types.Message):
    await _ensure_user_chat(m)
    if not await _is_editor_or_admin(m):
        await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    # /add_repeat <—Ç–∏–ø> <HH:MM> –¢–µ–∫—Å—Ç
    # —Ç–∏–ø: daily | weekdays | sunday | cron
    parts = m.text.strip().split()
    if len(parts) < 3:
        await m.answer(
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/add_repeat daily 10:00 –°–æ–±—Ä–∞–Ω–∏–µ\n"
            "/add_repeat weekdays 09:45 –°—Ç–µ–Ω–¥–∞–ø\n"
            "/add_repeat sunday 20:00 –û—Ç—á—ë—Ç\n"
            "/add_repeat cron \"*/15 * * * *\" –ü—É–ª—å—Å-—á–µ–∫"
        )
        return

    mode = parts[1].lower()
    if mode == "cron":
        cron_expr = parts[2].strip('"').strip("'")
        text = " ".join(parts[3:]).strip()
    else:
        try:
            hh, mm = map(int, parts[2].split(":"))
        except Exception:
            await m.answer("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: HH:MM")
            return
        if mode == "daily":
            cron_expr = f"{mm} {hh} * * *"
        elif mode == "weekdays":
            cron_expr = f"{mm} {hh} 1-5 * *"
        elif mode == "sunday":
            cron_expr = f"{mm} {hh} * * 0"
        else:
            await m.answer("–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: daily | weekdays | sunday | cron")
            return
        text = " ".join(parts[3:]).strip()

    if not text:
        await m.answer("–î–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return

    add_recurring_reminder(m.from_user.id, m.chat.id, text, cron_expr)
    logger.info("created recurring reminder user=%s chat=%s cron=%s text=%r",
                m.from_user.id, m.chat.id, cron_expr, text)
    await m.answer(f"‚úÖ –°–æ–∑–¥–∞–ª –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n<b>{text}</b>\nCRON: <code>{cron_expr}</code>")

# ================= –¢–∞–π–º–∑–æ–Ω–∞ –∏ ¬´—Ç–∏—Ö–∏–µ —á–∞—Å—ã¬ª =================
@dp.message(Command("set_tz"))
async def cmd_set_tz(m: types.Message):
    await _ensure_user_chat(m)
    parts = m.text.strip().split()
    if len(parts) < 2:
        await m.answer("–£–∫–∞–∂–∏ —Ç–∞–π–º–∑–æ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_tz Europe/Moscow")
        return
    set_user_tz(m.from_user.id, parts[1])
    await m.answer(f"–¢–∞–π–º–∑–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {parts[1]}")

@dp.message(Command("quiet"))
async def cmd_quiet(m: types.Message):
    await _ensure_user_chat(m)
    parts = m.text.strip().split()
    if len(parts) < 2:
        await m.answer("–§–æ—Ä–º–∞—Ç: /quiet HH-HH  –∏–ª–∏ /quiet off")
        return
    arg = parts[1].lower()
    if arg == "off":
        set_quiet_hours(m.from_user.id, None, None)
        await m.answer("–¢–∏—Ö–∏–µ —á–∞—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return
    try:
        qf, qt = arg.split("-")
        set_quiet_hours(m.from_user.id, int(qf), int(qt))
        await m.answer(f"–¢–∏—Ö–∏–µ —á–∞—Å—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {qf}:00‚Äì{qt}:00")
    except Exception:
        await m.answer("–§–æ—Ä–º–∞—Ç: /quiet 23-8  –∏–ª–∏ /quiet off")

# ======================= –†–æ–ª–∏ –≤ —á–∞—Ç–µ =======================
@dp.message(Command("role"))
async def cmd_role(m: types.Message):
    await _ensure_user_chat(m)
    # /role list
    # /role grant <user_id> editor
    # /role revoke <user_id>
    parts = m.text.strip().split()
    if len(parts) == 2 and parts[1].lower() == "list":
        rows = list_roles(m.chat.id)
        if not rows:
            await m.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π.")
            return
        lines = ["–†–æ–ª–∏ —á–∞—Ç–∞:"]
        for r in rows:
            lines.append(f"‚Ä¢ user_id={r['user_id']} ‚Üí {r['role']}")
        await m.answer("\n".join(lines))
        return

    if len(parts) >= 3 and parts[1].lower() in ("grant", "revoke"):
        if not await _is_admin(m):
            return
        try:
            target_id = int(parts[2].replace("@", ""))
        except ValueError:
            await m.answer("–ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç: /role grant <user_id> editor")
            return
        if parts[1].lower() == "grant":
            role = parts[3] if len(parts) > 3 else "editor"
            grant_role(m.chat.id, target_id, role)
            await m.answer(f"–í—ã–¥–∞–ª —Ä–æ–ª—å {role} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")
        else:
            revoke_role(m.chat.id, target_id)
            await m.answer(f"–°–Ω—è–ª —Ä–æ–ª–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.")
        return

    await m.answer("–§–æ—Ä–º–∞—Ç—ã:\n/role list\n/role grant <user_id> editor\n/role revoke <user_id>")

# ==================== DEBUG-–∫–æ–º–∞–Ω–¥—ã (—Å–∫—Ä—ã—Ç—ã–µ –≤ –º–µ–Ω—é) ====================
@dp.message(Command("dbg_insert"))
async def dbg_insert(m: types.Message):
    """
    /dbg_insert [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç...]
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–æ–∑–¥–∞—ë—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º "DBG ping".
    """
    await _ensure_user_chat(m)

    parts = m.text.strip().split(maxsplit=2)
    minutes = 1
    text = "DBG ping"
    if len(parts) >= 2:
        try:
            minutes = int(parts[1])
        except ValueError:
            pass
    if len(parts) == 3:
        text = parts[2].strip()

    when = datetime.now(timezone.utc) + timedelta(minutes=minutes)
    try:
        add_reminder(m.from_user.id, m.chat.id, text, when)
        logger.info(
            "DBG: inserted reminder user=%s chat=%s when=%s text=%r",
            m.from_user.id, m.chat.id, when.isoformat(), text
        )
        await m.answer(
            f"‚úÖ DBG: –≤—Å—Ç–∞–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            f"<b>{text}</b>\n"
            f"‚è∞ {when.strftime('%Y-%m-%d %H:%M:%S')} UTC\n"
            f"(user_id={m.from_user.id}, chat_id={m.chat.id})"
        )
    except Exception as e:
        logger.exception("DBG insert failed")
        await m.answer(f"‚ùå DBG insert failed: <code>{e}</code>")


@dp.message(Command("dbg_list"))
async def dbg_list(m: types.Message):
    """
    /dbg_list ‚Äî –ø–æ–∫–∞–∂–µ—Ç –¥–æ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å–∏ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ë–î.
    """
    await _ensure_user_chat(m)
    try:
        res = get_active_reminders(m.from_user.id)
        items = res.data or []  # —É —Ç–µ–±—è get_active_reminders –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç .data
        if not items:
            await m.answer("DBG: –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        lines = ["DBG: –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"]
        for r in items[:10]:
            rid = str(r["id"])[:8]
            when = r.get("remind_at") or r.get("next_at")
            lines.append(f"‚Ä¢ {rid} | {when} | {r.get('kind','once')} | {r['text']}")
        await m.answer("\n".join(lines))
    except Exception as e:
        logger.exception("DBG list failed")
        await m.answer(f"‚ùå DBG list failed: <code>{e}</code>")


@dp.message(Command("dbg_who"))
async def dbg_who(m: types.Message):
    """
    /dbg_who ‚Äî –±—ã—Å—Ç—Ä—ã–π –≤—ã–≤–æ–¥ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ —Ñ–∞–∫—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö.
    –£–¥–æ–±–Ω–æ, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –æ—à–∏–±–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π.
    """
    await _ensure_user_chat(m)
    await m.answer(
        "DBG who:\n"
        f"user_id = <code>{m.from_user.id}</code>\n"
        f"chat_id = <code>{m.chat.id}</code>\n"
        "–ó–∞–ø–∏—Å–∏ –≤ telegram_users/telegram_chats –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
