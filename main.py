import logging
import os
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command
from aiogram.types import Update
from aiogram.utils.chat_action import ChatActionSender
from db import upsert_chat, set_tournament_subscription, add_reminder, get_active_reminders, delete_reminder_by_id, set_paused
from scheduler_core import TournamentScheduler, UniversalReminderScheduler
from texts import HELP_TEXT
from datetime import datetime, time

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "webhook")
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL")

if not BOT_TOKEN or not PUBLIC_BASE_URL:
    raise RuntimeError("TELEGRAM_BOT_TOKEN and PUBLIC_BASE_URL must be set")

app = FastAPI()
logger = logging.getLogger("remindly")
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command("help"))
async def cmd_help(m: types.Message):
    await m.answer(HELP_TEXT, parse_mode=None, disable_web_page_preview=True)

# === –¢—É—Ä–Ω–∏—Ä–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
_tourney = TournamentScheduler(bot)

# === Webhook ===
@app.post(f"/{WEBHOOK_SECRET}")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception:
        logger.exception("Webhook handler failed")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Å—á–∏—Ç–∞–ª –æ—à–∏–±–∫—É –∫–∞–∫ 502
        return {"ok": True}

@app.get("/")
async def root():
    return {"status": "up"}

@app.get("/health")
async def health():
    return {"ok": True}

_tourney = TournamentScheduler(bot)
_universal = UniversalReminderScheduler(bot)

@app.on_event("startup")
async def on_startup():
    _tourney.start()
    _universal.start()

    await bot.set_webhook(
        url=f"{PUBLIC_BASE_URL}/{WEBHOOK_SECRET}",
        drop_pending_updates=True
    )

    await bot.set_my_commands(
        [
            BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"),
            BotCommand(command="subscribe_tournaments", description="–í–∫–ª—é—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand(command="unsubscribe_tournaments", description="–í—ã–∫–ª—é—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand(command="tourney_now", description="–ü—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–æ–±–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"),
            BotCommand(command="add", description="–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
            BotCommand(command="delete", description="–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand(command="pause", description="–ü–∞—É–∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand(command="resume", description="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        ]
    )

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
async def _is_admin(message: types.Message) -> bool:
    if message.chat.type not in {ChatType.GROUP, ChatType.SUPERGROUP}:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return False

    member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
    if not (member.is_chat_admin() or member.is_chat_creator()):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
        return False

    return True

# === –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
@dp.message(Command("subscribe_tournaments"))
async def cmd_subscribe_tournaments(m: types.Message):
    if not await _is_admin(m):
        return
    await m.chat.do(ChatActionSender.typing())
    upsert_chat(chat_id=m.chat.id, type_=m.chat.type, title=m.chat.title)
    set_tournament_subscription(chat_id=m.chat.id, value=True)
    await m.answer(
        "‚úÖ –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤: "
        "14:00, 16:00, 18:00, 20:00, 22:00, 00:00 (–ú–°–ö)."
    )

@dp.message(Command("unsubscribe_tournaments"))
async def cmd_unsubscribe_tournaments(m: types.Message):
    if not await _is_admin(m):
        return
    set_tournament_subscription(chat_id=m.chat.id, value=False)
    await m.answer("‚è∏Ô∏è –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

@dp.message(Command("test"))
async def cmd_test(m: types.Message):
    await m.answer("‚úÖ –Ø –Ω–∞ —Å–≤—è–∑–∏. –í–µ–±—Ö—É–∫ –∞–∫—Ç–∏–≤–µ–Ω, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ.")
@dp.message(Command("tourney_now"))
async def cmd_tourney_now(m: types.Message):
    # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø
    if not await _is_admin(m):
        return
    now = datetime.now()
    # –ü–µ—Ä–µ–¥–∞—ë–º –≤ –æ—Ç–ø—Ä–∞–≤–∫—É ¬´–≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞¬ª, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
    display = time(now.hour, (now.minute // 5) * 5)  # –æ–∫—Ä—É–≥–ª–∏–º –¥–æ 5 –º–∏–Ω—É—Ç
    await m.answer("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–±–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å‚Ä¶")
    await _tourney._send_tournament(m.chat.id, display)