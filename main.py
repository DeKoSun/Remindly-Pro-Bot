import os
import re
import logging
from datetime import datetime, timedelta, timezone
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Update,
    BotCommand,
    CallbackQuery,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllGroupChats,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from croniter import croniter

from scheduler_core import TournamentScheduler, UniversalReminderScheduler
from texts import HELP_TEXT, MSG, E
from db import (
    upsert_chat,
    upsert_telegram_user,
    get_active_reminders,
    get_active_reminders_for_chat,
    add_reminder,
    add_recurring_reminder,
    delete_reminder_by_id,
    set_paused,
)

# ------------------ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ------------------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "webhook")
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL")

if not BOT_TOKEN or not PUBLIC_BASE_URL:
    raise RuntimeError("TELEGRAM_BOT_TOKEN and PUBLIC_BASE_URL must be set")

def _default_props():
    # aiogram v3 –¥–æ–ø—É—Å–∫–∞–µ—Ç –∫–∞–∫ model_validate(v2), —Ç–∞–∫ –∏ __init__ (—Å—Ç–∞—Ä—ã–µ –≤–µ—Ç–∫–∏)
    try:
        return DefaultBotProperties.model_validate({"parse_mode": ParseMode.HTML})
    except AttributeError:
        return DefaultBotProperties(parse_mode=ParseMode.HTML)

bot = Bot(BOT_TOKEN, default=_default_props())
dp = Dispatcher()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
_tourney = TournamentScheduler(bot)
_universal = UniversalReminderScheduler(bot, poll_interval_sec=30)  # 30 —Å–µ–∫ ‚Äî –∫–∞–∫ –ø—Ä–æ—Å–∏–ª–∏

@asynccontextmanager
async def lifespan(app: FastAPI):
    try:
        yield
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º aiohttp-—Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ FastAPI
        await bot.session.close()

app = FastAPI(lifespan=lifespan)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("remindly")

# ------------------ FSM ------------------
class AddOnceSG(StatesGroup):
    text = State()
    when = State()

class AddRepeatSG(StatesGroup):
    text = State()
    sched = State()

# ------------------ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ------------------
async def _ensure_user_chat(m: types.Message) -> None:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —á–∞—Ç–µ –≤ –ë–î."""
    try:
        if m.from_user:
            upsert_telegram_user(m.from_user.id)
        upsert_chat(chat_id=m.chat.id, type_=m.chat.type, title=getattr(m.chat, "title", None))
    except Exception as e:
        logger.exception("ensure_user_chat failed: %s", e)

def _parse_when_once(raw: str) -> datetime:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
      - '—á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç', '+N', '+N –º–∏–Ω'
      - '–∑–∞–≤—Ç—Ä–∞ HH:MM'
      - 'HH:MM' (–µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äî –Ω–∞ –∑–∞–≤—Ç—Ä–∞)
      - –∏–Ω–∞—á–µ: now + 2 –º–∏–Ω—É—Ç—ã (–¥–µ—Ñ–æ–ª—Ç)
    """
    s = (raw or "").strip().lower()
    now = datetime.now(timezone.utc)

    if s.startswith("—á–µ—Ä–µ–∑ "):
        parts = s.split()
        if len(parts) >= 2 and parts[1].isdigit():
            return now + timedelta(minutes=int(parts[1]))

    if s.startswith("+"):
        t = s[1:].strip().replace(" –º–∏–Ω", "").strip()
        if t.isdigit():
            return now + timedelta(minutes=int(t))

    if s.startswith("–∑–∞–≤—Ç—Ä–∞"):
        rest = s.replace("–∑–∞–≤—Ç—Ä–∞", "").strip()
        if ":" in rest:
            hh, mm = rest.split(":", 1)
            return (now + timedelta(days=1)).replace(
                hour=int(hh), minute=int(mm), second=0, microsecond=0
            )

    if ":" in s:
        hh, mm = s.split(":", 1)
        if hh.isdigit() and mm.isdigit():
            target = now.replace(hour=int(hh), minute=int(mm), second=0, microsecond=0)
            if target <= now:
                target += timedelta(days=1)
            return target

    return now + timedelta(minutes=2)

def _parse_repeat_to_cron(raw: str) -> str:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
      - 'cron: */5 * * * *'
      - '–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É'
      - '–∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç'
      - '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ HH:MM'
      - 'HH:MM'
    """
    s = (raw or "").strip().lower()
    if s.startswith("cron:"):
        return s.split("cron:", 1)[1].strip()

    if s == "–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É":
        return "* * * * *"

    m = re.match(r"^–∫–∞–∂–¥(—ã–π|—ã–µ)\s+(\d+)\s*(–º–∏–Ω—É—Ç(—É|—ã)?|–º–∏–Ω)\b", s)
    if m:
        n = max(1, min(59, int(m.group(2))))
        return f"*/{n} * * * *"

    if s.startswith("–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"):
        rest = s.replace("–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "").strip()
        if ":" in rest:
            hh, mm = rest.split(":", 1)
            return f"{int(mm)} {int(hh)} * * *"

    if ":" in s:
        hh, mm = s.split(":", 1)
        return f"{int(mm)} {int(hh)} * * *"

    # –¥–µ—Ñ–æ–ª—Ç ‚Äî –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    return "* * * * *"

def _cron_next_utc(expr: str) -> datetime:
    return croniter(expr, datetime.now(timezone.utc)).get_next(datetime)

def _fmt_utc(dt: datetime) -> str:
    """–ö—Ä–∞—Å–∏–≤–æ–µ UTC-–≤—Ä–µ–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not isinstance(dt, datetime):
        try:
            dt = datetime.fromisoformat(str(dt))
        except Exception:
            return str(dt)
    if dt.tzinfo is None:
        dt = dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M (UTC)")

def _build_reminders_list_text(rows: list[dict]) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–ø–∏—Å–∫–∞ —Å —ç–º–æ–¥–∑–∏/—Å—Ç–∞—Ç—É—Å–∞–º–∏."""
    if not rows:
        return MSG["list_empty"]
    lines = [MSG["list_header"]]
    for idx, r in enumerate(rows, start=1):
        text = r.get("text", "‚Äî")
        kind = r.get("kind") or "once"
        paused = bool(r.get("paused"))
        remind_at = r.get("remind_at")
        next_at = r.get("next_at")
        when = remind_at if kind == "once" else next_at
        status = E["pause"] if paused else ("üîÅ" if kind != "once" else "‚Ä¢")
        lines.append(f"{idx}. {status} <b>{text}</b> ‚Äî {_fmt_utc(when) if when else '‚Äî'}")
    return "\n".join(lines)

def _build_reminders_keyboard(rows: list[dict]) -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    for r in rows:
        rid = r["id"]
        paused = bool(r.get("paused"))
        if paused:
            kb.button(text=f"{E['play']} –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f"rem:resume:{rid}")
        else:
            kb.button(text=f"{E['pause']} –ü–∞—É–∑–∞", callback_data=f"rem:pause:{rid}")
        kb.button(text=f"{E['trash']} –£–¥–∞–ª–∏—Ç—å", callback_data=f"rem:delete:{rid}")
        kb.adjust(2)
    return kb

async def _refresh_list_message(chat_id: int, message: types.Message):
    rows = get_active_reminders_for_chat(chat_id, include_paused=True)
    text = _build_reminders_list_text(rows)
    kb = _build_reminders_keyboard(rows)
    try:
        await message.edit_text(text, reply_markup=kb.as_markup(), disable_web_page_preview=True)
    except Exception:
        await message.answer(text, reply_markup=kb.as_markup(), disable_web_page_preview=True)

# ------------------ –ö–æ–º–∞–Ω–¥—ã ------------------
@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    await _ensure_user_chat(m)
    await m.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command("help"))
async def cmd_help(m: types.Message):
    await _ensure_user_chat(m)
    await m.answer(HELP_TEXT, disable_web_page_preview=True)

@dp.message(Command("ping"))
async def cmd_ping(m: types.Message):
    await _ensure_user_chat(m)
    try:
        _ = get_active_reminders(m.from_user.id)
        sched = "ok" if (_tourney and _universal) else "no"
        await m.answer(f"üèì pong ‚Äî ‚úÖ db=ok | üóì sched={sched}")
    except Exception as e:
        await m.answer(str(MSG["pong_db_err"](e)))

# -------- /add (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ) --------
@dp.message(Command("add"))
async def add_once_start(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    await state.set_state(AddOnceSG.text)
    await m.answer(str(MSG["enter_text"]))

@dp.message(AddOnceSG.text, F.text)
async def add_once_text(m: types.Message, state: FSMContext):
    await state.update_data(text=m.text.strip())
    await state.set_state(AddOnceSG.when)
    await m.answer(str(MSG["when_once"]))

@dp.message(AddOnceSG.when, F.text)
async def add_once_finish(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    data = await state.get_data()
    text = data.get("text", "").strip()
    when = _parse_when_once(m.text)
    try:
        row = add_reminder(
            user_id=m.from_user.id,
            chat_id=m.chat.id,
            text=text,
            remind_at=when,
        )
        out = str(MSG["created_once"](text, _fmt_utc(row.get("remind_at", when))))
        await m.answer(out)
    except Exception as e:
        await m.answer(str(MSG["create_fail"](e)))
    finally:
        await state.clear()

# -------- /add_repeat (–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è) --------
@dp.message(Command("add_repeat"))
async def add_repeat_start(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    await state.set_state(AddRepeatSG.text)
    await m.answer(str(MSG["enter_text_repeat"]))

@dp.message(AddRepeatSG.text, F.text)
async def add_repeat_text(m: types.Message, state: FSMContext):
    await state.update_data(text=m.text.strip())
    await state.set_state(AddRepeatSG.sched)
    await m.answer(str(MSG["when_repeat"]))

@dp.message(AddRepeatSG.sched, F.text)
async def add_repeat_finish(m: types.Message, state: FSMContext):
    await _ensure_user_chat(m)
    data = await state.get_data()
    text = data.get("text", "").strip()
    expr = _parse_repeat_to_cron(m.text)
    try:
        next_at = _cron_next_utc(expr)
        row = add_recurring_reminder(
            user_id=m.from_user.id,
            chat_id=m.chat.id,
            text=text,
            cron_expr=expr,
        )
        out = str(MSG["created_cron"](text, expr, _fmt_utc(row.get("next_at") or next_at)))
        await m.answer(out)
    except Exception as e:
        await m.answer(str(MSG["create_cron_fail"]) + f"\n<code>{e}</code>")
    finally:
        await state.clear()

# -------- /list (–∫–Ω–æ–ø–∫–∏) --------
@dp.message(Command("list"))
async def cmd_list(m: types.Message):
    await _ensure_user_chat(m)
    rows = get_active_reminders_for_chat(m.chat.id, include_paused=True)
    text = _build_reminders_list_text(rows)
    kb = _build_reminders_keyboard(rows)
    await m.answer(text, reply_markup=kb.as_markup(), disable_web_page_preview=True)

# -------- Callback: pause/resume/delete --------
@dp.callback_query(F.data.startswith("rem:"))
async def cb_reminders(cq: CallbackQuery):
    try:
        _, action, rid = cq.data.split(":", 2)
    except Exception:
        return await cq.answer(str(MSG["bad_data"]), show_alert=True)

    try:
        if action == "pause":
            set_paused(rid, True)
            await cq.answer(str(MSG["paused"]))
        elif action == "resume":
            set_paused(rid, False)
            await cq.answer(str(MSG["resumed"]))
        elif action == "delete":
            delete_reminder_by_id(rid)
            await cq.answer(str(MSG["deleted"]))
        else:
            return await cq.answer(str(MSG["bad_action"]), show_alert=True)

        if cq.message:
            await _refresh_list_message(cq.message.chat.id, cq.message)
    except Exception as e:
        await cq.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

# ------------------ Webhook ------------------
@app.post(f"/{WEBHOOK_SECRET}")
async def telegram_webhook(request: Request):
    data = await request.json()
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å pydantic v2/v1
    try:
        update = Update.model_validate(data)        # v2
    except AttributeError:
        try:
            update = Update.parse_obj(data)         # v1
        except AttributeError:
            update = Update(**data)                 # –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
    if _tourney:
        _tourney.start()
    if _universal:
        _universal.start()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±-—Ö—É–∫
    await bot.set_webhook(
        url=f"{PUBLIC_BASE_URL}/{WEBHOOK_SECRET}",
        drop_pending_updates=True,
    )

    # –ö–æ–º–∞–Ω–¥—ã (–ø—Ä–∏–≤–∞—Ç/–≥—Ä—É–ø–ø—ã)
    commands = [
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º ‚ÑπÔ∏è"),
        BotCommand("add", "–°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–æ–≤–æ–µ üìù"),
        BotCommand("add_repeat", "–°–æ–∑–¥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è üîÅ"),
        BotCommand("list", "–°–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ üìã"),
        BotCommand("ping", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è üèì"),
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeAllPrivateChats())
    await bot.set_my_commands(commands, scope=BotCommandScopeAllGroupChats())

@app.get("/")
async def root():
    return {"status": "up"}

@app.get("/health")
async def health():
    return {"ok": True}
